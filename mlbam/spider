#!/usr/bin/env bash
#
# Download baseball data (XML) files from MLBAM.
#
# All files are run through `xmllint --format`. Content is verified after
# formatting to ensure xmllint isn't doing anything funny. If there is a
# difference between the file contents pre-and post-processing, a message
# will be printed to STDERR and the downloaded file is stored in the same
# directory with a .orig extension.
#
# This script strives for POSIX-compliance where possible but, among other
# things, requires a non-standard date command that supports the -d option
# for specifying a custom date. It works on Ubuntu and does not work on OSX.
#

usage() {
  echo "Usage:"
  printf "  %s [options] [output_dir]\n" $(basename $0) >&2
  echo ""
  echo "Options:"
  echo "  -y <year>    Year for which to download files (default: $(date +%Y))."
  echo "  -l <league>  League: mlb, milb, etc (default: mlb)."
  echo "  -t           Include today's files (othewise stops at yesterday)."
  echo "  -v           Be verbose (display downloaded files)."
  echo "  -w           Overwrite existing files."
  echo "  -h           Print this help."
}

# takes a timestamp and format string
formatdate() {
  date -d "1970-01-01 $1 sec" +"$2"
}

# month_xx/day_xx portion of URL or path for the given date
datepath() {
  formatdate "$1" "month_%m/day_%d"
}

# base MLBAM URL for a given date
dateurl() {
  echo "$baseurl/year_$year/$(datepath $1)"
}

# ids of games played on the given date
gameids() {
  curl -s "$(dateurl $1)/"                |
  grep 'gid_[0-9]\{4\}_[0-9]\{2\}_[0-9]\{2\}' |
  sed 's:.*href="\([^/"]*\)/".*:\1:'
}

# files to download for each game
datafiles() {
  echo "boxscore.xml"
  echo "players.xml"
  echo "game.xml"
  echo "gameday_Syn.xml"
  echo "linescore.xml"
}

# download a file (takes URL and filesystem path)
fetchfile() {
  [ $verbose ] && echo "  $file"
  curl -sf "$1" -o "$2.orig"
  curlexit="$?"
  if [ $curlexit -eq 22 ]; then
    # warning when file doesn't appear to exist
    echo "Warning: couldn't download $1 (server responded with HTTP >=400)"
    return
  elif [ $curlexit -gt 0 ]; then
    # error when problem connecting to server
    echo "Error: couldn't download $1 (curl exited with code $curlexit)" >&2
    return 1
  fi

  XMLLINT_INDENT="  " xmllint --format "$2.orig" > "$2"
  # Some files have an XML declaration, xmllint adds one if it's missing.
  # We remove the XML declarations and all whitespace before comparing files.
  diff <(sed '1{s/<?xml.*?>//}' "$2" | tr -d " \t\n") \
    <(sed '1{s/<?xml.*?>//}' "$2.orig" | tr -d " \t\n") > /dev/null
  if [ $? -eq 0 ]; then
    rm "$2.orig"
  else
    echo "Error: unexpected xmllint output for $2" >&2
  fi

  ((downloads += 1))
  [ $(($downloads % 10)) -eq 0 ] && sleep 1
}

year=$(date +%Y)
league=mlb
overwrite=
today=
verbose=

# keep track of downloads so we can sleep occasionally
downloads=0

while getopts "y:l:vwth" opt; do
  case $opt in
    y) year="$OPTARG" ;;
    l) league="$OPTARG" ;;
    t) today=true ;;
    v) verbose=true ;;
    w) overwrite=true ;;
    h) usage; exit 0 ;;
    *) usage; exit 1 ;;
  esac
done
shift $(( OPTIND - 1 ))

baseurl="http://gdx.mlb.com/components/game/$league"
[ -z $1 ] && outputdir="./mlbam" || outputdir="$1"

# set first and last dates to fetch (seconds since 1970-01-01)
firstdate=$(date -d "$year-02-01" +%s)
if [ "$year" -eq $(date +%Y) ]; then
  lastdate=$(date +%s)
  [ $today ] || ((lastdate -= 60*60*24))
else
  lastdate=$(date -d "$year-11-10" +%s)
fi

echo "Downloading data for $league ($(formatdate "$firstdate" "%b %d") - \
$(formatdate "$lastdate" "%b %d"), $year) to $outputdir"

d="$firstdate"

while true; do
  for gid in $(gameids $d); do
    [ $verbose ] && echo "Processing game $gid"
    gameurl="$(dateurl $d)/$gid"
    gamedir="$outputdir/$(datepath $d)/$gid"
    mkdir -p "$gamedir"
    for file in $(datafiles); do
      if [ ! -f "$gamedir/$file" ] || [ $overwrite ]; then
        fetchfile "$gameurl/$file" "$gamedir/$file"
      fi
    done
  done
  if [ "$(formatdate $d %F)" == "$(formatdate $lastdate %F)" ]; then
    break
  else
    ((d += 60*60*24))
  fi
done
