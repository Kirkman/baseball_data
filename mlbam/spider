#!/usr/bin/env bash
#
# Download baseball data (XML) files from MLBAM.
#
# All files are run through `xmllint --format`. Content is verified after
# formatting to ensure xmllint isn't doing anything funny. If there is a
# difference between the file contents pre-and post-processing, a message
# will be printed to STDERR and the downloaded file is stored in the same
# directory with a .orig extension.
#
# Progress reports and non-critical warnings are sent to standard output
# and errors that need user attention are sent to standard error, so you
# can run the script and keep two separate log files, for example:
#
#   spider [options] >spider.log 2>spider.error.log
#
# or, if you want to view progress and just log errors:
#
#   spider [options] 2>spider.error.log
#
# This script strives for POSIX-compliance where possible but, among other
# things, requires the GNU date command which supports the -d option for
# specifying a custom date. It works on Ubuntu and does not work on OSX,
# which comes with the BSD date command.
#
# REQUIREMENTS
#
# You must have curl and xmllint installed. On Ubuntu:
#
#   sudo apt-get install libxml2-utils curl
#

usage() {
  echo "Usage:"
  printf "  %s [options] [output_dir]\n" $(basename $0)
  echo ""
  echo "Options:"
  echo "  -y <year>    Year for which to download files (default: $(current_year))."
  echo "  -l <league>  League: mlb, milb, etc (default: mlb)."
  echo "  -t           Include today's files (othewise stops at yesterday)."
  echo "  -q           Be quiet: output errors only (on STDERR)."
  echo "  -v           Be verbose: output detailed progress messages."
  echo "  -w           Overwrite existing files."
  echo "  -h           Print this help."
}

# print a message
msg() {
  case $1 in
    error)    echo "Error: $2" >&2 ;;
    notice)   $quiet   || echo "$2" ;;
    progress) $quiet   || echo "$2" ;;
    warning)  $verbose && echo "Warning: $2" ;;
    detail)   $verbose && echo "$2" ;;
  esac
}

# takes a timestamp and format string
formatdate() {
  if [ $(date_command_version) == "bsd" ]; then
    date -j -f "%s" "$1" +"$2"
  else
    date -d "1970-01-01 $1 sec" +"$2"
  fi
}

# month_xx/day_xx portion of URL or path for the given date
datepath() {
  formatdate "$1" "month_%m/day_%d"
}

# base MLBAM URL for a given date
dateurl() {
  echo "$baseurl/year_$year/$(datepath $1)"
}

current_year() {
  date +%Y
}

current_timestamp() {
  date +%s
}

default_start_date() {
  if [ $(date_command_version) == "bsd" ]; then
    date -v2m -v1d -v0H -v0M -v0S +%s
  else
    date -d "$year-02-01 00:00:00" +%s
  fi
}

default_end_date() {
  if [ $(date_command_version) == "bsd" ]; then
    date -v11m -v1d -v0H -v0M -v0S +%s
  else
    date -d "$year-11-10 00:00:00" +%s
  fi
}

date_command_version() {
  toolset_name
}

toolset_name() {
  [ $(uname) == "Darwin" ] && echo "bsd" || echo "gnu"
}

# ids of games played on the given date
gameids() {
  sed -n 's:.*\(gid_[^/"]*\).*:\1:p' \
    <<<"$(fetch_game_index $1)" | uniq
}

# takes date, prints URL of game list
game_index_url() {
  case $league in
    mlb) echo "$(dateurl $1)/" ;;
    milb) echo "$(dateurl $1)/milb_master_game_file.xml" ;;
  esac
}

# takes date, prints content
fetch_game_index() {
  url="$(game_index_url $1)"
  html="$(curl -sf $url)"
  curlexit="$?"
  if (( curlexit > 0 )); then
    msg error "couldn't download $url (curl exited with code $curlexit)"
    return 1
  fi
  echo "$html"
}

# files to download for each game
datafiles() {
  echo "boxscore.xml"
  echo "players.xml"
  echo "game.xml"
  echo "gameday_Syn.xml"
  echo "linescore.xml"
}

# download a file (takes URL and filesystem path)
fetchfile() {
  msg detail "  $file"
  curl -sf "$1" -o "$2.orig"
  curlexit="$?"
  if (( curlexit == 22 )); then
    msg warning "couldn't download $1 (server responded with HTTP >=400)"
    return
  elif (( curlexit > 0 )); then
    msg error "couldn't download $1 (curl exited with code $curlexit)"
    return 1
  fi

  XMLLINT_INDENT="  " xmllint --format "$2.orig" > "$2"
  # Some files have an XML declaration, xmllint adds one if it's missing.
  # We remove the XML declarations and all whitespace before comparing files.
  diff -q <(sed '1{s/<?xml.*?>//}' "$2" | tr -d " \t\n") \
    <(sed '1{s/<?xml.*?>//}' "$2.orig" | tr -d " \t\n") > /dev/null
  if [ $? -eq 0 ]; then
    rm "$2.orig"
  else
    msg error "unexpected xmllint output for $2"
  fi

  (( ++downloads ))
  (( downloads % 10 == 0 )) && sleep 1
}

# takes a command name (and package name, if different)
check_dependency(){
  [ -n "$2" ] && package="$2" || package="$1"
  $1 --version > /dev/null 2>&1
  if [ $? -eq 127 ]; then
    echo "$1 not found, please install it (on Ubuntu: sudo apt-get install $package)."
    exit 1
  fi
}

absolute_path() {
  [ $(toolset_name) == "gnu" ] && readlink -f "$1" || echo "$1"
}

# check for required libraries before starting
check_dependency xmllint libxml2-utils
check_dependency curl

# set some reasonable defaults
year=$(current_year)
league=mlb
previous=
overwrite=
today=
quiet=false
verbose=false

# process user command line options
while getopts "y:l:p:vqwth" opt; do
  case $opt in
    y) year="$OPTARG" ;;
    l) league="$(echo "$OPTARG" | tr '[:upper:]' '[:lower:]')" ;;
    p) previous="$OPTARG" ;;
    t) today=true ;;
    q) quiet=true ;;
    v) verbose=true ;;
    w) overwrite=true ;;
    h) usage; exit 0 ;;
    *) usage; exit 1 ;;
  esac
done
shift $(( OPTIND - 1 ))

# set base URL and output directory
baseurl="http://gdx.mlb.com/components/game/$league"
[ -z $1 ] && outputdir="./mlbam" || outputdir="$1"
outputdir="$(absolute_path "$outputdir")"

# set ending date (seconds since 1970-01-01)
if (( year == $(current_year) )); then
  lastdate=$(current_timestamp)
  [ $today ] || (( lastdate -= 60*60*24 ))
else
  lastdate=$(default_end_date)
fi

# set starting date
if [ -n "$previous" ]; then
  firstdate=$(($lastdate - 60*60*24*($previous - 1)))
else
  firstdate=$(default_start_date)
fi

# keep track of downloads so we can sleep occasionally
downloads=0

# start downloading
msg notice "Downloading data for $league ($(formatdate "$firstdate" "%b %d") - \
$(formatdate "$lastdate" "%b %d"), $year) to $outputdir"

starttime=$(current_timestamp)
d="$firstdate"

while [ $(formatdate "$d" %F) != $(formatdate "$lastdate" %F) ]; do
  for gid in $(gameids $d); do
    msg progress "Processing game $gid"
    gameurl="$(dateurl $d)/$gid"
    gamedir="$outputdir/$(datepath $d)/$gid"
    mkdir -p "$gamedir"
    for file in $(datafiles); do
      if [ ! -f "$gamedir/$file" ] || [ $overwrite ]; then
        fetchfile "$gameurl/$file" "$gamedir/$file"
      fi
    done
  done
  ((d += 60*60*24))
done

# announce the results
elapsed=$(($(current_timestamp) - $starttime))
msg notice "Finished in $(formatdate "$elapsed" "%H hrs %M mins %S secs")."
